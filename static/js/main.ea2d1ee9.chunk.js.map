{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","props","react_default","a","createElement","className","Form","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","wind","description","error","API_KEY","App","state","undefined","icon","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","cod","_this","setState","console","log","main","temp","sys","speed","weather","stop","this","components_Titles","components_Form","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQASeA,EAPA,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,kBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,6BAAd,6DCQOC,EARF,SAAAL,GAAK,OACdC,EAAAC,EAAAC,cAAA,QAAMG,SAAUN,EAAMO,WAAYH,UAAU,eACxCH,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,OAAOC,YAAY,kBAC3CT,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,UAAUC,YAAY,qBAC9CT,EAAAC,EAAAC,cAAA,+BCoCOQ,EAxCC,SAAAX,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAIPJ,EAAMY,MAAQZ,EAAMa,SAAWZ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,iBACvCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCJ,EAAMY,KAAzC,KAAiDZ,EAAMa,UAK/Cb,EAAMc,aAAeb,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,gBAC7BH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCJ,EAAMc,YAAzC,YAKQd,EAAMe,UAAYd,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,aAC1BH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCJ,EAAMe,SAAzC,QAKQf,EAAMgB,MAAQf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,eACtBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCJ,EAAMgB,KAAzC,MAKQhB,EAAMiB,aAAehB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,eAC7BH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCJ,EAAMiB,YAAzC,MAKQjB,EAAMkB,OAASjB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBJ,EAAMkB,SClC1DC,EAAU,mCAoGDC,6MAhGXC,MAAQ,CACJP,iBAAaQ,EACbV,UAAMU,EACNT,aAASS,EACTP,cAAUO,EACVN,UAAMM,EACNL,iBAAaK,EACbC,UAAMD,EACNJ,WAAOI,KAIXf,iDAAa,SAAAiB,EAAOC,GAAP,IAAAb,EAAAC,EAAAa,EAAAC,EAAA,OAAAC,EAAA1B,EAAA2B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACTP,EAAEQ,iBAGIrB,EAAOa,EAAES,OAAOC,SAASvB,KAAKwB,MAC9BvB,EAAUY,EAAES,OAAOC,SAAStB,QAAQuB,MALjCN,EAAAE,KAAA,EAQcK,MAAK,qDAAAC,OAAsD1B,EAAtD,KAAA0B,OAA8DzB,EAA9D,WAAAyB,OAA+EnB,EAA/E,kBARnB,cAQHO,EARGI,EAAAS,KAAAT,EAAAE,KAAA,EASUN,EAASc,OATnB,OAYQ,OAHXb,EATGG,EAAAS,MAYAE,IACLC,EAAKC,SAAS,CACV7B,iBAAaQ,EACbV,UAAMU,EACNT,aAASS,EACTP,cAAUO,EACVN,UAAMM,EACNL,iBAAaK,EACbJ,MAAO,iHAEJN,GAAQC,GACf+B,QAAQC,IAAIlB,GACZe,EAAKC,SAAS,CACV7B,YAAaa,EAAKmB,KAAKC,KACvBnC,KAAMe,EAAKlB,KACXI,QAASc,EAAKqB,IAAInC,QAClBE,SAAUY,EAAKmB,KAAK/B,SACpBC,KAAMW,EAAKX,KAAKiC,MAChBhC,YAAaU,EAAKuB,QAAQ,GAAGjC,YAC7BC,MAAO,MAGXwB,EAAKC,SAAS,CACV7B,iBAAaQ,EACbV,UAAMU,EACNT,aAASS,EACTP,cAAUO,EACVN,UAAMM,EACNL,iBAAaK,EACbJ,MAAO,iGAzCN,yBAAAY,EAAAqB,SAAA3B,EAAA4B,uIA+CT,OACInD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXH,EAAAC,EAAAC,cAACkD,EAAD,OAGJpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAEXH,EAAAC,EAAAC,cAACmD,EAAD,CAAM/C,WAAY6C,KAAK7C,aAGvBN,EAAAC,EAAAC,cAACoD,EAAD,CACIzC,YAAasC,KAAK/B,MAAMP,YACxBC,SAAUqC,KAAK/B,MAAMN,SACrBH,KAAMwC,KAAK/B,MAAMT,KACjBC,QAASuC,KAAK/B,MAAMR,QACpBG,KAAMoC,KAAK/B,MAAML,KACjBC,YAAamC,KAAK/B,MAAMJ,YACxBC,MAAOkC,KAAK/B,MAAMH,qBApFxCsC,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ea2d1ee9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = props => (\r\n    <div>\r\n        <h1 className=\"title-container__title\">Weather Finder</h1>\r\n        <h3 className=\"title-container__subtitle\">Find out about temparature and other weather conditions</h3>\r\n    </div>\r\n);\r\n\r\nexport default Titles;","import React from \"react\";\r\n\r\n// This is example of functional component (that doesn't contain state)\r\n// It must have \"props\" argument to work\r\n// If we have one argument like \"props\" it doesn't need parenthesis and return statement\r\nconst Form = props => (\r\n    <form onSubmit={props.getWeather} className=\"inputValues\">\r\n        <input type=\"text\" name=\"city\" placeholder=\"Enter City...\" />\r\n        <input type=\"text\" name=\"country\" placeholder=\"Enter Country...\" />\r\n        <button>Get Weather</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\n// This is example of functional component (that doesn't contain state)\r\n// It must have \"props\" argument to work\r\n// If we have one argument like \"props\" it doesn't need parenthesis and return statement\r\nconst Weather = props => (\r\n    <div className=\"weather__info\">\r\n        {/* If all conditions are tru we render this <p> */}\r\n\r\n        {\r\n            props.city && props.country && <p className=\"weather__key\"> City/Country:\r\n\t \t\t<span className=\"weather__value\"> {props.city}, {props.country}</span>\r\n            </p>\r\n        }\r\n\r\n        {\r\n            props.temperature && <p className=\"weather__key\"> Temperature:\r\n\t \t\t<span className=\"weather__value\"> {props.temperature} Â°C </span>\r\n            </p>\r\n        }\r\n\r\n        {\r\n            props.humidity && <p className=\"weather__key\"> Humidity:\r\n\t \t\t<span className=\"weather__value\"> {props.humidity} % </span>\r\n            </p>\r\n        }\r\n\r\n        {\r\n            props.wind && <p className=\"weather__key\"> Wind speed:\r\n\t \t\t<span className=\"weather__value\"> {props.wind} </span>\r\n            </p>\r\n        }\r\n\r\n        {\r\n            props.description && <p className=\"weather__key\"> Conditions:\r\n\t \t\t<span className=\"weather__value\"> {props.description} </span>\r\n            </p>\r\n        }\r\n\r\n        {\r\n            props.error && <p className=\"weather__error\">{props.error}</p>\r\n        }\r\n    </div>\r\n);\r\n\r\nexport default Weather;","import React from \"react\";\r\n\r\nimport Titles from \"./components/Titles\"\r\nimport Form from \"./components/Form\"\r\nimport Weather from \"./components/Weather\"\r\n\r\nconst API_KEY = \"c0364be54edc84ce5682c6e620e2519c\";\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        wind: undefined,\r\n        description: undefined,\r\n        icon: undefined,\r\n        error: undefined\r\n    }\r\n    // create state and set up it's initial value\r\n\r\n    getWeather = async (e) => {\r\n        e.preventDefault();\r\n        // Prevents default behaviour of page (refresh after clicking submit button)\r\n\r\n        const city = e.target.elements.city.value;\r\n        const country = e.target.elements.country.value;\r\n        // Creating const to store value from \"Form\" component \r\n\r\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\r\n        const data = await api_call.json();      // converts api call to JSON format\r\n\r\n        // If city and country is entered correctly as value render code bellow\r\n        if (data.cod === 404) {\r\n            this.setState({\r\n                temperature: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                humidity: undefined,\r\n                wind: undefined,\r\n                description: undefined,\r\n                error: \"Please make sure you entered valid values for city and state (ex. Sarajevo/BA, New York/US, London/UK ... ).\",\r\n            });\r\n        } else if (city && country) {\r\n            console.log(data);\r\n            this.setState({\r\n                temperature: data.main.temp,\r\n                city: data.name,\r\n                country: data.sys.country,\r\n                humidity: data.main.humidity,\r\n                wind: data.wind.speed,\r\n                description: data.weather[0].description,\r\n                error: \"\"\r\n            });\r\n        } else {\r\n            this.setState({\r\n                temperature: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                humidity: undefined,\r\n                wind: undefined,\r\n                description: undefined,\r\n                error: \"Please enter valid values for city and state. (ex. Sarajevo/BA, New York/US, London/UK ... )\"\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"wrapper\">\r\n                    <div className=\"main\">\r\n                        <div className=\"container\">\r\n                            <div className=\"row omot\">\r\n\r\n                                <div className=\"col-xs-5 title-container\">\r\n                                    <Titles />\r\n                                </div>\r\n\r\n                                <div className=\"col-xs-7 form-container\">\r\n\r\n                                    <Form getWeather={this.getWeather} />\r\n                                    {/* Creates props for this component so we can acces form inside of it */}\r\n\r\n                                    <Weather\r\n                                        temperature={this.state.temperature}\r\n                                        humidity={this.state.humidity}\r\n                                        city={this.state.city}\r\n                                        country={this.state.country}\r\n                                        wind={this.state.wind}\r\n                                        description={this.state.description}\r\n                                        error={this.state.error}\r\n                                    />\r\n                                    {/* Creating props for Weather component and callsing values from state */}\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport \"./App.css\";\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}